Release 0.8.0
-------------

:Release: 0.8.0
:Date: TBD

Highlights
~~~~~~~~~~

* New documentation system with a new website at
  `zipline.io <http://www.zipline.io>`__
* Major performance enhancements.
* Dynamic history.

Enhancements
~~~~~~~~~~~~

* Account object: Adds an account object to conext to track information about
  the trading account.
  Example:

  .. code-block:: python

     context.account.settled_cash

  Returns the settled cash value that is stored on the account object.
  This value is updated accordingly as the algorithm is run (:issue:`396`).
* :class:`~zipline.history.history_container.HistoryContainer` can now grow
  dynamically.  Calls to :func:`~zipline.api.history` will now be able to increase
  the size or change the shape of the history container to be able to service the
  call. :func:`~zipline.api.add_history` now acts as a preformance hint to
  pre-allocate sufficient space in the container. This change is backwards
  compatible with ``history``, all existing algorithms should continue to work as
  intended (:issue:`412`).
* Simple transforms ported from quantopian and use history.
  :class:`~zipline.protocol.SIDData` now has methods for:

  -  ``stddev``
  -  ``mavg``
  -  ``vwap``
  -  ``returns``

  These methods, except for ``returns``, accept a number of days. If
  you are running with minute data, then this will calculate the
  number of minutes in those days, accounting for early closes and the
  current time and apply the transform over the set of minutes.
  ``returns`` takes no parameters and will return the daily returns of
  the given asset.
  Example:

  .. code:: python

     data[security].stddev(3)

  (:issue:`429`).
* New fields in Performance Period.
  Performance Period has new fields accessible in return value of
  ``to_dict``:
  -  gross leverage
  -  net leverage
  -  short exposure
  -  long exposure
  -  shorts count
  -  longs count
  (:issue:`464`).
* Allow :func:`~zipline.api.order_percent` to work with various market values
  (by Jeremiah Lowin).

  Currently, :func:`~zipline.api.order_percent` and
  :func:`~zipline.api.order_target_percent` both operate as a percentage of
  ``self.portfolio.portfolio_value``. This PR lets them operate as percentages
  of other important MVs.
  Also adds ``context.get_market_value()``, which enables this
  functionality.
  For example:

  .. code-block:: python

     # this is how it works today (and this still works)
     # put 50% of my portfolio in AAPL
     order_percent('AAPL', 0.5)
     # note that if this were a fully invested portfolio, it would become 150% levered.

     # take half of my available cash and buy AAPL
     order_percent('AAPL', 0.5, percent_of='cash')

     # rebalance my short position, as a percentage of my current short
     book_target_percent('MSFT', 0.1, percent_of='shorts')

     # rebalance within a custom group of stocks
     tech_stocks = ('AAPL', 'MSFT', 'GOOGL')
     tech_filter = lambda p: p.sid in tech_stocks
     for stock in tech_stocks:
         order_target_percent(stock, 1/3, percent_of_fn=tech_filter)

  (:issue:`477`).
* Command line option to for printing algo to stdout (by Andrea D'Amore)
  (:issue:`545`).

Bug Fixes
~~~~~~~~~

* Fix a bug where the reported returns could sharply dip for random periods of
  time (:issue:`378`).

Performance
~~~~~~~~~~~
* Major performance enhancements to history (by Dale Jung) (:issue:`488`).

Maintenance and Refactorings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Build
~~~~~

Documentation
~~~~~~~~~~~~~

* Switched to sphinx for the documentation (:issue:`816`).

Contributors
~~~~~~~~~~~~
