Release 1.4.0
-------------

:Release: 1.4.0
:Date: TBD

Highlights
~~~~~~~~~~

International Pipelines
```````````````````````

TODO

New Domains
```````````

- Argentina
- Chile
- Colombia
- Czechia
- Greece
- Hungary
- Indonesia
- Malaysia
- Mexico
- Pakistan
- Peru
- Philippines
- Poland
- Russia
- Taiwan
- Thailand
- Turkey
- South Africa

(:issue:`2550`, :issue:`2552`, :issue:`2559`)

DataSetFamily
`````````````

 Dataset families are used to represent data where the unique identifier for
 a row requires more than just asset and date coordinates. A
 :class:`zipline.pipeline.data.DataSetFamily` can also be thought of as a collection of
 :class:`~zipline.pipeline.data.DataSet` objects, each of which has the same
 columns, domain, and ndim.

 :class:`zipline.pipeline.data.DataSetFamily` objects are defined with one or more
 :class:`~zipline.pipeline.data.Column` objects, plus one additional field:
 ``extra_dims``.

 The ``extra_dims`` field defines coordinates other than asset and date that
 must be fixed to produce a logical timeseries. The column objects determine
 columns that will be shared by slices of the family.

 ``extra_dims`` are represented as an ordered dictionary where the keys are
 the dimension name, and the values are a set of unique values along that
 dimension.

 To work with a :class:`zipline.pipeline.data.DataSetFamily` in a pipeline expression, one must
 choose a specific value for each of the extra dimensions using the
 :meth:`~zipline.pipeline.data.DataSetFamily.slice` method.
 For example, given a :class:`zipline.pipeline.data.DataSetFamily`:

 .. code-block:: python

    class SomeDataSet(DataSetFamily):
        extra_dims = [
            ('dimension_0', {'a', 'b', 'c'}),
            ('dimension_1', {'d', 'e', 'f'}),
        ]

        column_0 = Column(float)
        column_1 = Column(bool)

 This dataset might represent a table with the following columns:

 ::

   sid :: int64
   asof_date :: datetime64[ns]
   timestamp :: datetime64[ns]
   dimension_0 :: str
   dimension_1 :: str
   column_0 :: float64
   column_1 :: bool

 Here we see the implicit ``sid``, ``asof_date`` and ``timestamp`` columns
 as well as the extra dimensions columns.

 This :class:`zipline.pipeline.data.DataSetFamily` can be converted to a regular :class:`zipline.pipeline.data.DataSet`
 with:

 .. code-block:: python

    DataSetSlice = SomeDataSet.slice(dimension_0='a', dimension_1='e')

 This sliced dataset represents the rows from the higher dimensional dataset
 where ``(dimension_0 == 'a') & (dimension_1 == 'e')``.

(:issue:`2402`, :issue:`2452`, :issue:`2456`)

New Built In Factors
````````````````````

- ``PercentChange``: Calculates the percent change over the given
  ``window_length``. Note: Percent change is calculated as
  ``(new - old) / abs(old)``. (:issue:`2506`)
- ``PeerCount``: gives the number of occurrences of each distinct
  category in a classifier (:issue:`2509`)

Enhancements
~~~~~~~~~~~~

- Added International Pipelines (:issue:`2262`)
- Added DataSetFamily (ne MultiDimensionalDataSet) - a shorthand for creating a collection of regular DataSets that share the same columns. (:issue:`2402`)
- Added ``DataSet.get_column`` for looking up columns by name (:issue:`2210`)
- Added ``CheckWindowsClassifier`` allows us to test lookback windows of
  categorical and string columns using pipeline. (:issue:`2458`)
- Added ``PipelineHooks`` which is now used to display Pipline progress
  bars (:issue:`2467`)
- ``BoundColumn`` comparisons will now result in an error. This prevents
  writing ``EquityPricing.volume > 1000`` (silently returning bad data)
  insteads of ``EquityPricing.volume.latest > 1000``. (:issue:`2537`)

Bug Fixes
~~~~~~~~~

- Fixed support for non unique sid->exchange mappings. (:issue:`2289`)
- Fixed crash on dividend warning (:issue:`2323`)
- Fixed `week_start` when Monday precedes the New Year. (:issue:`2394`)
- Ensured correct dtypes when unpacking empty dataframes. (:issue:`2444`)

Performance
~~~~~~~~~~~

- Added :class:`zipline.data.hdf5_daily_bars.HDF5DailyBarWriter`, which writes daily pricing in a new format as an HDF5 file. Each OHLCV field is stored as a 2D array in a chunked HDF5 dataset, with a row per sid and a column per day. The file also supports multiple countries. Added :class:`zipline.data.hdf5_daily_bars.HDF5DailyBarReader`, which implements the BarReader interface and can read files written by HDF5DailyBarWriter. (:issue:`2295`)
- Vectorized dividend ratio calculation (:issue:`2298`)

Maintenance and Refactorings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Made `parameter_space` reset instance fixtures between runs (:issue:`2433`)

Build
~~~~~

None

Documentation
~~~~~~~~~~~~~

None

Miscellaneous
~~~~~~~~~~~~~

None
