{% set name = "lru-dict" %}
{% set version = "1.1.4" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "c64937e2697c84eee79c66c6fb94c8b962ae6104b760f3e878d0af229395774e" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python

about:
  home: https://github.com/amitdev/lru-dict
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: An Dict like LRU container.
  description: "LRU Dict\n========\n\nA fixed size dict like container which evicts Least Recently Used (LRU) items\nonce size limit is exceeded. There are many python implementations available\nwhich does\
    \ similar things. This is a fast and efficient C implementation.\nLRU maximum capacity can be modified at run-time.\nIf you are looking for pure python version, look `else where <http://www.google.com/search?q=python+lru+dict>`_.\n\
    \nUsage\n=====\n\nThis can be used to build a LRU cache. Usage is almost like a dict.\n\n.. code:: python\n\n  from lru import LRU\n  l = LRU(5)         # Create an LRU container that can hold 5 items\n\
    \n  print l.peek_first_item(), l.peek_last_item()  #return the MRU key and LRU key\n  # Would print None None\n\n  for i in range(5):\n     l[i] = str(i)\n  print l.items()    # Prints items in MRU\
    \ order\n  # Would print [(4, '4'), (3, '3'), (2, '2'), (1, '1'), (0, '0')]\n\n  print l.peek_first_item(), l.peek_last_item()  #return the MRU key and LRU key\n  # Would print (4, '4') (0, '0')\n\n\
    \  l[5] = '5'         # Inserting one more item should evict the old item\n  print l.items()\n  # Would print [(5, '5'), (4, '4'), (3, '3'), (2, '2'), (1, '1')]\n\n  l[3]               # Accessing an\
    \ item would make it MRU\n  print l.items()\n  # Would print [(3, '3'), (5, '5'), (4, '4'), (2, '2'), (1, '1')]\n  # Now 3 is in front\n\n  l.keys()           # Can get keys alone in MRU order\n  #\
    \ Would print [3, 5, 4, 2, 1]\n\n  del l[4]           # Delete an item\n  print l.items()\n  # Would print [(3, '3'), (5, '5'), (2, '2'), (1, '1')]\n\n  print l.get_size()\n  # Would print 5\n\n  l.set_size(3)\n\
    \  print l.items()\n  # Would print [(3, '3'), (5, '5'), (2, '2')]\n  print l.get_size()\n  # Would print 3\n  print l.has_key(5)\n  # Would print True\n  print 2 in l\n  # Would print True\n\n  l.get_stats()\n\
    \  # Would print (1, 0)\n\n\n  l.update(5='0')           # Update an item\n  print l.items()\n  # Would print [(5, '0'), (3, '3'), (2, '2')]\n\n  l.clear()\n  print l.items()\n  # Would print []\n\n\
    \  def evicted(key, value):\n    print \"removing: %s, %s\" % (key, value)\n\n  l = LRU(1, callback=evicted)\n\n  l[1] = '1'\n  l[2] = '2'\n  # callback would print removing: 1, 1\n\n  l[2] = '3'\n\
    \  # doesn't call the evicted callback\n\n  print l.items()\n  # would print [(2, '3')]\n  \n  del l[2]\n  # doesn't call the evicted callback\n\n  print l.items()\n  # would print []\n\nInstall\n=======\n\
    \n::\n\n  pip install lru-dict\n\nor\n\n::\n\n  easy_install lru_dict\n\n\nWhen to use this\n================\n\nLike mentioned above there are many python implementations of an LRU. Use this\nif you\
    \ need a faster and memory efficient alternative. It is implemented with a\ndict and associated linked list to keep track of LRU order. See code for a more\ndetailed explanation. To see an indicative\
    \ comparison with a pure python module,\nconsider a `benchmark <https://gist.github.com/amitdev/5773979>`_ against\n`pylru <https://pypi.python.org/pypi/pylru/>`_ (just chosen at random, it should\n\
    be similar with other python implementations as well).\n\n::\n\n  $ python bench.py pylru.lrucache\n  Time : 3.31 s, Memory : 453672 Kb\n  $ python bench.py lru.LRU\n  Time : 0.23 s, Memory : 124328\
    \ Kb"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
