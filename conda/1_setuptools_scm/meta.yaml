{% set name = "setuptools_scm" %}
{% set version = "1.10.1" %}
{% set file_ext = "tar.bz2" %}
{% set hash_type = "sha256" %}
{% set hash_value = "1cdea91bbe1ec4d52b3e9c451ab32ae6e1f3aa3fd91e90580490a9eb75bea286" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python
    - setuptools

test:
  imports:
    - setuptools_scm

about:
  home: https://github.com/pypa/setuptools_scm/
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: the blessed package to manage your versions by scm tags
  description: "setuptools_scm\n===============\n\n:code:`setuptools_scm` handles managing your python package versions\nin scm metadata instead of declaring them as the version argument\nor in a scm managed\
    \ file.\n\nIt also handles file finders for the supported scm's.\n\n.. image:: https://travis-ci.org/pypa/setuptools_scm.svg?branch=master\n    :target: https://travis-ci.org/pypa/setuptools_scm\n\n\
    Setup.py usage\n--------------\n\nTo use setuptools_scm just modify your project's setup.py file like this:\n\n1. Add :code:`'setuptools_scm'` to the :code:`setup_requires` parameter\n2. Add the :code:`use_scm_version`\
    \ parameter and set it to ``True``\n\n   E.g.:\n\n   .. code:: python\n\n       from setuptools import setup\n       setup(\n           ...,\n           use_scm_version=True,\n           setup_requires=['setuptools_scm'],\n\
    \           ...,\n       )\n\n   Arguments to ``get_version()`` (see below) may be passed as a\n   dictionary to ``use_scm_version``. For example:\n\n   .. code:: python\n\n       from setuptools import\
    \ setup\n       setup(\n           ...,\n           use_scm_version = {\"root\": \"..\", \"relative_to\": __file__},\n           setup_requires=['setuptools_scm'],\n           ...,\n       )\n\n\n3.\
    \ Access the version number in your package via :code:`pkg_resources`\n\n   E.g. (`PEP-0396 <https://www.python.org/dev/peps/pep-0396>`_):\n\n   .. code:: python\n\n      from pkg_resources import get_distribution,\
    \ DistributionNotFound\n      try:\n          __version__ = get_distribution(__name__).version\n      except DistributionNotFound:\n         # package is not installed\n         pass\n\n\nProgrammatic\
    \ usage\n------------------\n\nIn order to use ``setuptools_scm`` from code that one directory deeper\nthan the project's root, you can use:\n\n.. code:: python\n\n    from setuptools_scm import get_version\n\
    \    version = get_version(root='..', relative_to=__file__)\n\nSee `setup.py Usage`_ above for how to use this within setup.py.\n\n\nUsage from sphinx\n-----------------\n\nIt is discouraged to use\
    \ setuptools_scm from sphinx itself,\ninstead use ``pkg_resources`` after editable/real installation:\n\n.. code:: python\n\n    from pkg_resources import get_distribution\n    release = get_distribution('myproject').version\n\
    \    # for example take major/minor\n    version = '.'.join(release.split('.')[:2])\n\nThe underlying reason is, that services like readthedocs sometimes change\nthe workingdirectory for good reasons\
    \ and using the installed metadata prevents\nusing needless volatile data there.\n\nNotable Plugins\n----------------\n\n`setuptools_scm_git_archive <https://pypi.python.org/pypi/setuptools_scm_git_archive>`_\n\
    provides partial support for obtaining versions from git archives\nthat belong to tagged versions. The only reason for not including\nit in setuptools-scm itself is git/github not supporting\nsufficient\
    \ metadata for untagged/followup commits,\nwhich is preventing a consistent UX.\n\n\nDefault versioning scheme\n--------------------------\n\nIn the standard configuration setuptools_scm takes a look\
    \ at 3 things:\n\n1. latest tag (with a version number)\n2. the distance to this tag (e.g. number of revisions since latest tag)\n3. workdir state (e.g. uncommitted changes since latest tag)\n\nand\
    \ uses roughly the following logic to render the version:\n\n:code:`no distance and clean`:\n    :code:`{tag}`\n:code:`distance and clean`:\n    :code:`{next_version}.dev{distance}+{scm letter}{revision\
    \ hash}`\n:code:`no distance and not clean`:\n    :code:`{tag}+dYYYMMMDD`\n:code:`distance and not clean`:\n    :code:`{next_version}.dev{distance}+{scm letter}{revision hash}.dYYYMMMDD`\n\nThe next\
    \ version is calculated by adding ``1`` to the last numeric component\nof the tag.\n\nFor git projects, the version relies on `git describe <https://git-scm.com/docs/git-describe>`_,\nso you will see\
    \ an additional ``g`` prepended to the ``{revision hash}``.\n\nSemantic Versioning (SemVer)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDue to the default behavior it's necessary to always include a\npatch version\
    \ (the ``3`` in ``1.2.3``), or else the automatic guessing\nwill increment the wrong part of the semver (e.g. tag ``2.0`` results in\n``2.1.devX`` instead of ``2.0.1.devX``). So please make sure to\
    \ tag\naccordingly.\n\n.. note::\n\n    Future versions of setuptools_scm will switch to\n    `SemVer <http://semver.org/>`_ by default hiding the the old behavior\n    as an configurable option.\n\n\
    \nBuiltin mechanisms for obtaining version numbers\n--------------------------------------------------\n\n1. the scm itself (git/hg)\n2. :code:`.hg_archival` files (mercurial archives)\n3. PKG-INFO\n\
    \n.. note::\n\n    git archives are not supported due to git shortcomings\n\n\nConfiguration Parameters\n------------------------------\n\nIn order to configure the way ``use_scm_version`` works you\
    \ can provide\na mapping with options instead of simple boolean value.\n\nThe Currently supported configuration keys are:\n\n:root:\n    cwd relative path to use for finding the scm root, defaults to\
    \ :code:`.`\n\n:version_scheme:\n    configures how the local version number is constructed.\n    either an entrypoint name or a callable\n\n:local_scheme:\n    configures how the local component of\
    \ the version is constructed\n    either an entrypoint name or a callable\n:write_to:\n    declares a text file or python file which is replaced with a file\n    containing the current version.\n  \
    \  its ideal or creating a version.py file within the package\n\n    .. warning::\n\n      only :code:`*.py` and :code:`*.txt` have builtin templates,\n      for other extensions it is necessary\n \
    \     to provide a :code:`write_to_template`\n:write_to_template:\n    a newstyle format string thats given the current version as\n    the :code:`version` keyword argument for formatting\n\n:relative_to:\n\
    \    a file from which root may be resolved. typically called by a\n    script or module that is not\n    in the root of the repository to direct setuptools_scm to the\n    root of the repository by\
    \ supplying ``__file__``.\n\n:parse:\n  a function that will be used instead of the discovered scm for parsing the version,\n  use with caution, this is a expert function and you should be closely familiar\n\
    \  with the setuptools_scm internals to use it\n\n\nTo use setuptools_scm in other Python code you can use the\n``get_version`` function:\n\n.. code:: python\n\n    from setuptools_scm import get_version\n\
    \    my_version = get_version()\n\nIt optionally accepts the keys of the ``use_scm_version`` parameter as\nkeyword arguments.\n\n\nEnvironment Variables\n---------------------\n\n:SETUPTOOLS_SCM_PRETEND_VERSION:\n\
    \  when defined and not empty,\n  its used as the primary source for the version number\n  in which case it will be a unparsed string\n\n\nExtending setuptools_scm\n------------------------\n\nsetuptools_scm\
    \ ships with a few setuptools entrypoints based hooks to extend\nits default capabilities.\n\nAdding a new SCM\n~~~~~~~~~~~~~~~~\n\nsetuptools_scm provides 2 entrypoints for adding new SCMs\n\n``setuptools_scm.parse_scm``\n\
    \    A function used to parse the metadata of the current workdir\n    using the name of the control directory/file of your SCM as the\n    entrypoint's name. E.g. for the built-in entrypoint for git\
    \ the\n    entrypoint is named :code:`.git` and references\n    :code:`'setuptools_scm.git:parse'`.\n\n    The return value MUST be a :code:`setuptools.version.ScmVersion` instance\n    created by the\
    \ function :code:`setuptools_scm.version:meta`.\n\n``setuptools_scm.files_command``\n    Either a string containing a shell command that prints all SCM managed\n    files in its current working directory\
    \ or a callable, that given a\n    pathname will return that list.\n\n    Also use then name of your SCM control directory as name of the entrypoint.\n\nVersion number construction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \n``setuptools_scm.version_scheme``\n    Configures how the version number is constructed given a\n    :code:`setuptools.version.ScmVersion` instance and should return a string\n    representing the\
    \ version.\n\n    Available implementations:\n\n    :guess-next-dev: automatically guesses the next development version (default)\n    :post-release: generates post release versions (adds :code:`postN`)\n\
    \n``setuptools_scm.local_scheme``\n    Configures how the local part of a version is rendered given a\n    :code:`setuptools.version.ScmVersion` instance and should return a string\n    representing\
    \ the local version.\n\n    Available implementations:\n\n    :node-and-date: adds the node on dev versions and the date on dirty\n                    workdir (default)\n    :dirty-tag: adds :code:`+dirty`\
    \ if the current workdir has changes\n\n\nImporting in setup.py\n~~~~~~~~~~~~~~~~~~~~~\n\nTo support usage in :code:`setup.py` passing a callable into use_scm_version\nis supported.\n\nWithin that callable,\
    \ setuptools_scm is available for import.\nThe callable must return the configuration.\n\n\n.. code:: python\n\n    def myversion():\n        from setuptools_scm.version import dirty_tag\n        def\
    \ clean_scheme(version):\n            return dirty_tag(version) if version.dirty else '+clean'\n\n        return {'local_scheme': clean_scheme}\n\n\nCode of Conduct\n---------------\n\nEveryone interacting\
    \ in the setuptools_scm project's codebases, issue trackers,\nchat rooms, and mailing lists is expected to follow the\n`PyPA Code of Conduct`_.\n\n.. _PyPA Code of Conduct: https://www.pypa.io/en/latest/code-of-conduct/"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
