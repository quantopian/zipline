#matrix:
#  fast_finish: true

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\appveyor\\run_with_env.cmd"

    # 1. Generated a token for appveyor at https://anaconda.org/quantopian/settings/access with scope api:write.
    #   Can also be done via anaconda CLI with
    #     $ anaconda auth --create --name my_appveyor_token
    # 2. Generated secure env var below via appveyor's Encrypt data tool at https://ci.appveyor.com/tools/encrypt.
    #   See https://www.appveyor.com/docs/build-configuration/#secure-variables.
    ANACONDA_TOKEN:
      secure: "kXWRGusUvfZgrrWTTH3Eou2NGy3UTlMz/6vjwY00bWZdbE6LsgByBb8ARMV+BzR4"

    CONDA_ROOT_PYTHON_VERSION: "2.7"

    PYTHON_ARCH: "64"
    PANDAS_VERSION: "0.18.1"
    NUMPY_VERSION: "1.11.3"
    SCIPY_VERSION: "0.17.1"

  matrix:
    - PYTHON_VERSION: "2.7"
    - PYTHON_VERSION: "3.5"

    - PYTHON_VERSION: "3.5"
      PANDAS_VERSION: "0.22.0"
      NUMPY_VERSION: "1.14.1"
      SCIPY_VERSION: "1.0.0"
      STATSMODELS_VERSION: "0.9.0"
      PANDAS_DATAREADER_VERSION: "0.4.0"
      DASK_VERSION: "0.17.1"

    - PYTHON_VERSION: "3.6"
      PANDAS_VERSION: "0.22.0"
      NUMPY_VERSION: "1.14.1"
      SCIPY_VERSION: "1.0.0"
      STATSMODELS_VERSION: "0.9.0"
      PANDAS_DATAREADER_VERSION: "0.4.0"
      DASK_VERSION: "0.17.1"

# We always use a 64-bit machine, but can build x86 distributions
# with the PYTHON_ARCH variable (which is used by CMD_IN_ENV).
platform:
  - x64

cache:
  - '%LOCALAPPDATA%\pip\Cache'

# all our python builds have to happen in tests_script...
build: false

init:
  - "ECHO %PYTHON_VERSION% %PYTHON_ARCH% %PYTHON%"
  - "ECHO %NUMPY_VERSION%"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  - ps: $NPY_VERSION_ARR=$env:NUMPY_VERSION -split '.', 0, 'simplematch'
  - ps: $env:CONDA_NPY=$NPY_VERSION_ARR[0..1] -join ""
  - ps: $PY_VERSION_ARR=$env:PYTHON_VERSION -split '.', 0, 'simplematch'
  - ps: $env:CONDA_PY=$PY_VERSION_ARR[0..1] -join ""
  - SET PYTHON=C:\Python%CONDA_PY%_64
  # Get cygwin's git out of our PATH.  See https://github.com/omnia-md/conda-dev-recipes/pull/16/files#diff-180360612c6b8c4ed830919bbb4dd459
  - "del C:\\cygwin\\bin\\git.exe"
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  - powershell .\ci\appveyor\install.ps1
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - sed -i "s/numpy==.*/numpy==%NUMPY_VERSION%/" etc/requirements_locked.txt
  - sed -i "s/pandas==.*/pandas==%PANDAS_VERSION%/" etc/requirements_locked.txt
  - sed -i "s/scipy==.*/scipy==%SCIPY_VERSION%/" etc/requirements_locked.txt
  - IF NOT "%STATSMODELS_VERSION%"=="" sed -i "s/statsmodels==.*/statsmodels==%STATSMODELS_VERSION%/" etc/requirements_locked.txt
  - IF NOT "%PANDAS_DATAREADER_VERSION%"=="" sed -i "s/pandas-datareader==.*/pandas-datareader==%PANDAS_DATAREADER_VERSION%/" etc/requirements_locked.txt
  - IF NOT "%DASK_VERSION%"=="" sed -i "s/dask\[dataframe\]==.*/dask\[dataframe\]==%DASK_VERSION%/" etc/requirements_locked.txt
  - cat etc/requirements_locked.txt
  - conda info -a
  - conda install conda=4.3.30 conda-build=3.0.28 anaconda-client=1.6.3 --yes -q
  - conda list
  # https://blog.ionelmc.ro/2014/12/21/compiling-python-extensions-on-windows/ for 64bit C compilation
  - ps: copy .\ci\appveyor\vcvars64.bat "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64"
  - "ECHO APPVEYOR_PULL_REQUEST_NUMBER: %APPVEYOR_PULL_REQUEST_NUMBER% APPVEYOR_REPO_BRANCH: %APPVEYOR_REPO_BRANCH%"
  - "%CMD_IN_ENV% python .\\ci\\make_conda_packages.py"

  # test that we can conda install zipline in a new env
  - conda create -n installenv --yes -q --use-local python=%PYTHON_VERSION% numpy=%NUMPY_VERSION% zipline -c quantopian -c https://conda.anaconda.org/quantopian/label/ci

  - ps: $env:BCOLZ_VERSION=(sls "bcolz==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  - ps: $env:NUMEXPR_VERSION=(sls "numexpr==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  - ps: $env:PYTABLES_VERSION=(sls "tables==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  - ps: $env:H5PY_VERSION=(sls "h5py==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  - ps: $env:TALIB_VERSION=(sls "ta-lib==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  # We conda install certifi at the pinned exact version because it is a transitive dependency of zipline via requests and uses distutils for packaging.
  # Since conda installs latest certifi by default, we would fail to uninstall that new version when trying to install the pinned version using pip later in the build:
  # "Cannot uninstall 'certifi'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall."
  - ps: $env:CERTIFI_VERSION=(sls "certifi==([^ ]*)" .\etc\requirements_locked.txt -ca).matches.groups[1].value
  - conda create -n testenv --yes -q --use-local "pip<19" python=%PYTHON_VERSION% numpy=%NUMPY_VERSION% pandas=%PANDAS_VERSION% scipy=%SCIPY_VERSION% ta-lib=%TALIB_VERSION% bcolz=%BCOLZ_VERSION% numexpr=%NUMEXPR_VERSION% pytables=%PYTABLES_VERSION% h5py=%H5PY_VERSION% certifi=%CERTIFI_VERSION% -c quantopian -c https://conda.anaconda.org/quantopian/label/ci
  - activate testenv
  - bash etc/dev-install --cache-dir=%LOCALAPPDATA%\pip\Cache\pip_np%CONDA_NPY%py%CONDA_PY%
  - python -m pip freeze | sort

test_script:
  - nosetests -e zipline.utils.numpy_utils
  - flake8 zipline tests

branches:
  only:
    - master
